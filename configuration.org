#+title: GNU Emacs configuration
#+author: Sergey Nikulin
#+email: snikulin@gmail.com
#+language: en

Idea of this configuration is based on Emacs config by Protesilaos Stavrou.
All configuration is stored in this Org file and after making any changes it should be tangled to generate real emacs config files.

To tangle Org file following code block should be invoked
#+begin_src emacs-lisp :tangle no :results none
  (org-babel-tangle)
#+end_src

or =C-c C-v C-t= keys pressed.

* The early initialisation of Emacs (=early-init.el=)

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t ; only for mouse events, which I seldom use
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name ; read the docstring
        inhibit-startup-buffer-menu t)

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src

I prefer to display relative line numbers

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Enable global display of line numbers
  (global-display-line-numbers-mode t)

  ;; Set line numbers to be relative
  (setq display-line-numbers-type 'relative)

  ;; Ensure relative line numbers are used in all buffers
  (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))
  (add-hook 'text-mode-hook (lambda () (setq display-line-numbers 'relative)))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Temporarily increase the garbage collection threshold.  These
  ;; changes help shave off about half a second of startup time.  The
  ;; `most-positive-fixnum' is DANGEROUS AS A PERMANENT VALUE.  See the
  ;; `emacs-startup-hook' a few lines below for what I actually use.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)

  ;; Same idea as above for the `file-name-handler-alist' and the
  ;; `vc-handled-backends' with regard to startup speed optimisation.
  ;; Here I am storing the default value with the intent of restoring it
  ;; via the `emacs-startup-hook'.
  (defvar prot-emacs--file-name-handler-alist file-name-handler-alist)
  (defvar prot-emacs--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
        vc-handled-backends nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 1000 1000 8)
                    gc-cons-percentage 0.1
                    file-name-handler-alist prot-emacs--file-name-handler-alist
                    vc-handled-backends prot-emacs--vc-handled-backends)))
#+end_src


#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Initialise installed packages at this early stage, by using the
  ;; available cache.  I had tried a setup with this set to nil in the
  ;; early-init.el, but (i) it ended up being slower and (ii) various
  ;; package commands, like `describe-package', did not have an index of
  ;; packages to work with, requiring a `package-refresh-contents'.
  (setq package-enable-at-startup t)
#+end_src


* Package.el related config

#+begin_src emacs-lisp :tangle "init.el"
;;;; Packages

(add-hook 'package-menu-mode-hook #'hl-line-mode)

;; Also read: <https://protesilaos.com/codelog/2022-05-13-emacs-elpa-devel/>
(setq package-archives
      '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
        ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ("melpa" . "https://melpa.org/packages/")))

;; Highest number gets priority (what is not mentioned has priority 0)
(setq package-archive-priorities
      '(("gnu-elpa" . 3)
        ("melpa" . 2)
        ("nongnu" . 1)))

(setq package-install-upgrade-built-in nil)
#+end_src

* Styling of my emacs

#+begin_src emacs-lisp :tangle "init.el"
  (defvar nik/default-font-size 140)
  (defvar nik/default-variable-font-size 140)

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Set fonts

#+begin_src emacs-lisp :tangle "init.el"
  (set-face-attribute 'default nil :font "Hack Nerd Font" :height nik/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height nik/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height nik/default-variable-font-size :weight 'regular)

#+end_src

Set theme

#+begin_src emacs-lisp :tangle "init.el"
  (use-package doom-themes
    :init (load-theme 'doom-tokyo-night t))
#+end_src

All the icons

#+begin_src emacs-lisp :tangle "init.el"
  (use-package all-the-icons)
#+end_src

Modeline

#+begin_src emacs-lisp :tangle "init.el"
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* Evil mode

I personally prefer Vim keybindings, so let's use it.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Use-package configuration for Evil mode
  (use-package evil
    :ensure t
    :init
    ;; Set up any variables before loading evil
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    :config
    ;; Enable Evil mode
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Which key

#+begin_src emacs-lisp :tangle "init.el"
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

* Counsel 
#+begin_src emacs-lisp :tangle "init.el"
  (use-package counsel
    :config
    (counsel-mode 1))

#+end_src

* Org mode

#+begin_src emacs-lisp :tangle "init.el"
  ;; Org mode customizations
  (defun nik/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.7)
                    (org-level-2 . 1.6)
                    (org-level-3 . 1.5)
                    (org-level-4 . 1.4)
                    (org-level-5 . 1.3)
                    (org-level-6 . 1.2)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

  (defun nik/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (org-bullets-mode 1))

  (use-package org
    :bind ("C-c c" . org-capture)
    :hook (org-mode . nik/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/org/inbox.org"
            "~/org/gr.org"
            "~/org/zencar.org"
            "~/org/loktar.org"
            "~/org/projects.org"
            "~/org/home.org"))
    (setq org-archive-location "~/org/archive.org::* From %s")
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("gr.org" :maxlevel . 1)
            ("zencar.org" :maxlevel . 1)
            ("loktar.org" :maxlevel . 1)
            ("projects.org" :maxlevel . 1)
            ("home.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/org/inbox.org" "Tasks")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/org/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/org/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/org/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/org/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
    (define-key global-map (kbd "C-c j")
                (lambda () (interactive) (org-capture nil "jj")))

    (nik/org-font-setup))

  (require 'org-tempo)


  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun nik/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

#+end_src

* Git specific settings
** Ediff specific settings
#+begin_src emacs-lisp :tangle "init.el"
  ;;;; `ediff'
  (use-package ediff
    :ensure nil
    :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
    :init
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    :config
    (setq ediff-keep-variants nil)
    (setq ediff-make-buffers-readonly-at-startup nil)
    (setq ediff-merge-revisions-with-ancestor t)
    (setq ediff-show-clashes-only t))
#+end_src

** Project.el settings
#+begin_src emacs-lisp :tangle "init.el"
  ;;;; `project'
  (use-package project
    :ensure nil
    :bind
    (("C-x p ." . project-dired)
     ("C-x p C-g" . keyboard-quit)
     ("C-x p <return>" . project-dired)
     ("C-x p <delete>" . project-forget-project))
    :config
    (setopt project-switch-commands
            '((project-find-file "Find file")
              (project-find-regexp "Find regexp")
              (project-find-dir "Find directory")
              (project-dired "Root dired")
              (project-vc-dir "VC-Dir")
              (project-shell "Shell")
              (keyboard-quit "Quit")))
    (setq project-vc-extra-root-markers '(".project")) ; Emacs 29
    (setq project-key-prompt-style t) ; Emacs 30

    (advice-add #'project-switch-project :after #'prot-common-clear-minibuffer-message))

#+end_src

** Magit

#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :init
    (setq magit-define-global-key-bindings nil)
    (setq magit-section-visibility-indicator '("⮧"))
    :config
    (setq git-commit-summary-max-length 50)
    (setq git-commit-style-convention-checks '(non-empty-second-line))
    (setq magit-diff-refine-hunk t)
    (setq magit-repository-directories
          '(("~/pro" . 1))))
#+end_src

* Password store

#+begin_src emacs-lisp :tangle "init.el"
  (use-package password-store
    :ensure t
    :bind ("C-c k" . password-store-copy)
    :config
    (setq password-store-time-before-clipboard-restore 30))

  (use-package pass
    :ensure t
    :commands (pass))
#+end_src
